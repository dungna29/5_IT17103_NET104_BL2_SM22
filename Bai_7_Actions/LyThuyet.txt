Action Selectors & Action Verbs & Action Results
	A. Action Selector: Action selector là một attribute có thể được áp dụng co controller action. Các attribute này giúp Routing Engine chọn đúng action method để xử lý request. ASP.NET Core bao gồm 3 kiểu Action Selector:
		1. ActionName: ActionName attribute định nghĩa tên của một action. Routing engine sẽ sử dụng tên này thay vì tên phương thức để match với action name trong routing. Bạn sẽ dùng attribute này khi bạn muốn một alias cho tên phương thức: Nói cách khác chúng at muốn thay đổi tên Action method khi gọi trên url
		2. NonAction:Public method trong class controller được gọi như Action methods. Các phương thức này có thể được gọi bởi bất cứ ai ở bất cứ đâu trên thế giới đơn giản chỉ cần gõ URL lên trình duyệt. Bạn có thể cho Routing Engine biết đó là một phương thức đặc biệt không phải là một Action method bằng cách đặt attribute NonAction
		Ví dụ 1 2: SinhVienActionSelectorController
		3. Action Verbs:Action verbs selector được sử dụng khi bạn muốn điều kiển action method dựa trên HTTP Request method. Điều này được đảm nhiệm sử dụng tập các attribute bởi MVC, ví dụ như HttpGet và HttpPost. Nó được gọi là Http Attributes.
			a. Một số HTTP Verbs có sẵn trong ưng dụng ASP.NET Core. Chúng là GET, POST, PUT, DELETE, HEAD, OPTIONS, PATCH. Mỗi verbs này kết hợp với HTTP Method Attributes được định nghĩa trong namespace Microsoft.AspNetCore.Mvc.Routing.
			b. HTTP Attribute cho phép chúng ta định nghĩa 2 phương thức với cùng tên nhưng khác kiểu response với HTTP Verb khác nhau.
		Ví dụ 3: SinhVienActionVerbController
		Sử dụng nhiều Action Verbs: AcceptVerbs  attribute cho phép sử dụng nhiều action verb trên action method:
	B. Action Results
		1. Định nghĩa: Controller Action sẽ trả về kết quả cho client. Client có thể mong muốn một kết quả đơn giản như là chuỗi hay số nguyên hoặc một kết quả phức tạp như là JSON hay HTML view hoặc file để download. Có các loại Action Result khác nhau sẵn có giúp xây dựng các loại kết quả trả về khác nhau cho client
			+ ControllerBase trong Controller có sẵn các helper class để tạo ra các ActionResult trả về cho client dễ hơn thay vì phải viết code nhiều đó là lợi ích đem lại.
		2.IActionResult và ActionResult:
			+ IActionResult là một interface nó định nghĩa một khuôn mẫu cho toàn bộ các Action Result của một action method.
			+ ActionResult là một abstract base class triển khai interface IActionResult. Action result như ViewResult, PartialViewResult hay JsonResult...đều kế thừa từ ActionResult base class.
		Ví dụ: SinhVienActionResultsController
		3.Chuyển hướng người dùng(Redriect ): Redriect result được dùng khi bạn muốn chuyển hướng người dùng đến một URL khác. Có 4 loại redirect result có sẵn. RedirectResult, LocalRedirectResult, RedirectToActionResult và RedirectToRouteResult.
		4. Trả về file: FileResult là một Action result sử dụng bởi Controller action để trả về file cho người dùng. FileResult là một base class sử dụng để gửi file nhị phân về response. Nó là một abstract class được triển khai bởi FileContentResult, FileStreamResult, VirtualFileResult, và PhysicalFileResult. Các class này đảm nhiệm công việc gửi file về client.
		5. Trả về nội dung văn bản: Content Result
			+ JsonResult: Action result này trả về dữ liệu được định dạng JSON. Nó chuyển một object sang JSON và trả nó về client:
			+ ContentResult: ContentResult ghi một nội dung cụ thể trực tiếp vào response như một chuỗi định dạng văn bản thuần.
			+ EmptyResult: EmptyResult giống như tên của nó không chứa cái gì cả. Sử dụng nó khi bạn muốn thực thi một số logic trong controller nhưng không muốn trả về gì.
		6. Trả về lỗi và HTTP Code: Loại Action result này được dùng trong Web API Controller. Kết quả sẽ được gửi về kèm HTTP Status Code. Một trong số chúng thì có thể gửi một đối tượng vào response.
			+ StatusCodeResult StatusCodeResult gửi kết quả và chỉ ra một HTTP Status code:
			+ ObjectResult: Action result này sẽ trả về một đối tượng kèm một HTTP Status Code là 200. Nó là một overload của method StatusCode
			+ OkResult: Action result này trả về nguyên chỉ có HTTP Status code 200:
			+ OkObjectResult Action result này trả về một HTTP Status code 200:
			+ CreatedResult: CreatedResult sử dụng khi một tài nguyên được tạo ra sau request Post. Nó gửi trạng thái 201 về kèm đối tượng vừa được tạo:
			+ CreatedAtActionResult: Cái này tương tự CreatedResult nhưng nó nhận vào Controller và Action thay vì URL:
			+ CreateAtRouteResult: Action Result này nhận vào gái trị route và tương tự như CreatedResult và CreatedAtActionResult
			+ BadRequestResult: Action result này gửi về một HTTP Status code 400 cho client. Sử dụng response status code này khi chỉ ra cú pháp không đúng hoặc một request không được rõ ràng.
			+ BadRequestObjectResult: Action result này tương tự BadRequestResult. Khác nhau là bạn có thể gửi về một ModelStateDictionary (chứa chi tiết lỗi) và cũng là status 400:
			+ NotFoundResult: Action result này trả về lỗi HTTP 404 cho client:
			+ NotFoundObjectResult: Action result này tương tự nuhw NotFoundResult nhưng trả về một đuối tượng kèm lỗi 404. Overload thứ 2 của NotFound giúp nhận một đối tượng làm tham số để trả về NotFoundObjectResult.
			+ UnsupportedMediaTypeResult: Action result này gửi về lỗi HTTP 415. Sử dụng action result này khi request với định dạng không được hỗ trợ bởi server.
			+ NoContentResult: Action result này gửi lỗi HTTP 204 về. Sử dụng NoContentResult này khi request thành công nhưng không có nội dung nào được trả về
			+ Kết quả liên quan đến bảo mật: SignInResult là kết quả của hành động đăng nhập. SignInManager.SignInAsync hoặc PasswordSignInAsync trả về một SignInResult. Nó có 4 thuộc tính là Succeeded, IsLockedOut, IsNotAllowed và RequiresTwoFactor

